type 'a liste = vide | cons of  'a* 'a liste;;
type terme=po|pf|op of string|entier of int;;
type arbre=V|N of terme*arbre*arbre;;

let lire_car =function nom ->
 let canal=open_in nom in
  let rec lirea =function  () -> 
         try let a = input_char canal in 
            cons (a ,lirea ())  with
       End_of_file -> begin close_in canal;vide end
      in    lirea ();;

let is_sep = function ` `| `\n` -> true
                     | _ -> false;;


let rec saute_mot = function vide -> vide
        | cons(car,reste) as l -> if is_sep car then l
                  else saute_mot reste;;

let char2str = function car -> make_string 1 car;;

let rec  premier_mot = function vide -> ""
     | cons(car,reste) -> if is_sep car then ""
                else char2str car ^  premier_mot reste;;

let rec analyselex = function vide->vide
  |cons (car,reste) as l -> if is_sep car then
            analyselex reste
    else cons(premier_mot l , analyselex (saute_mot l));;

let ch2terme=function "("->po
	|")"->pf
	|("+"|"-"|"*"|"/")as ope ->op ope
	|v->entier ((int_of_string v));;

let rec trans=fun f vide->vide
	|f (cons(tete,reste))->
			cons((f tete),(trans f reste));;

let l=lire_car "exprinv.txt";;
let l=analyselex l ;;
let l=trans ch2terme l;;

let op2fun=function 
		op  "+"-> prefix +
		|op "-"->prefix -
		|op "*"->prefix *
		|op "/"->prefix /
		|_->failwith"impossibleo";; 



let reduire=fun ch (cons(entier v2,cons(entier v1,reste)))->
cons(entier ((op2fun ch) v1 v2),reste)
		|_ _ -> failwith"impossibler";;

let rec traiter=fun vide (cons(a,vide))->a
		|(cons(entier v,reste)) pile->traiter reste (cons(entier v,pile))
		|(cons(op ope,reste)) pile->traiter reste (reduire (op ope) pile)
		|_ _->failwith"impossiblet";;

traiter l vide;;


